{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","todos","remove","observable","action","todoStore","lastID","push","_this","remainTodos","map","todo","filter","status","replace","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","addTodo","setState","counterRemainTodos","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","onToggle","props","toggle","removeTodo","delete","checked","htmlFor","onClick","TodoItems","components_TodoItem","Footer","concat","href","filterTodo","clearCompleted","App","components_TodoEntry","components_TodoItems","length","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e64801e.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\n\nexport default class TodoModel {\n    store\n    id\n    @observable title\n    @observable completed\n\n    constructor(store, title, completed, id){\n        this.title = title\n        this.completed = completed\n        this.id = id\n        this.store = store\n    }\n\n    @action\n    toggle(){\n        this.completed = !this.completed\n    }\n    @action\n        delete() {\n            this.store.todos.remove(this);\n        }\n}\n","import {observable, action, computed} from 'mobx'\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n    @observable todos = []\n    lastID = 0\n\n    @observable remainTodos = 0;\n    @observable status = 'all';\n\n    @action\n    addTodo(title){\n        this.todos.push(new TodoModel(this, title, false, this.lastID ++))\n    }\n\n    @action\n    counterRemainTodos() {\n        this.remainTodos = 0;\n        this.todos.map(todo => {\n            if (!todo.completed) {\n                this.remainTodos++;\n            }\n        });\n    }\n\n    @action\n    filterTodo(filter) {\n        this.status = filter;\n    }\n\n    @action\n    clearCompleted() {\n        this.todos.replace(this.todos.filter(todo=> todo.completed === false))\n    }\n    \n}\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \"\"\r\n  };\r\n\r\n  handleKeyDown = event => {\r\n    if(event.keyCode !== 13){\r\n      return;\r\n    }\r\n    event.preventDefault()\r\n    todoStore.addTodo(this.state.value)\r\n    this.setState({\r\n      value: ''\r\n    })\r\n    todoStore.counterRemainTodos();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todo</h1>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={event => this.setState({value: event.target.value})}\r\n          onKeyDown={\r\n            event => this.handleKeyDown(event)\r\n          }\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport {observer} from 'mobx-react';\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n  onToggle = () => {\r\n    this.props.todo.toggle();\r\n    todoStore.counterRemainTodos();\r\n  }\r\n  removeTodo = () => {\r\n    this.props.todo.delete();\r\n    todoStore.counterRemainTodos();\r\n  }\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <li className={todo.completed ? \"completed\" : \" \"}>\r\n        <div className=\"view\">\r\n          <input\r\n            onChange={this.onToggle}\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            value=\"on\"\r\n            checked={todo.completed}\r\n          />\r\n          <label htmlFor=\"\">{todo.title}</label>\r\n          <button className=\"destroy\" onClick={this.removeTodo}></button>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {\r\n            todoStore.todos.map(todo=>{\r\n              if(todoStore.status==='active'){\r\n                return (!todo.completed ? <TodoItem todo={todo}/> : '')\r\n              }else if(todoStore.status==='completed'){\r\n                return (todo.completed ? <TodoItem todo={todo}/> : '')\r\n              }else {\r\n                return <TodoItem todo={todo}/>\r\n              }\r\n            })\r\n          }\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\nimport { observe, observer } from \"mobx-react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className={\"footer\"}>\r\n        <span className=\"todo-count\">{todoStore.remainTodos+`${todoStore.remainTodos >1 ? ' items left': ' item left'}`}</span>\r\n        <ul className=\"filters\">\r\n          <li>\r\n            <a href=\"#\" className={todoStore.status==='all'? 'selected': ''} onClick={() => todoStore.filterTodo(\"all\")}>\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" className={todoStore.status==='active'? 'selected': ''} onClick={() => todoStore.filterTodo(\"active\")}>\r\n              Active\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\" className={todoStore.status==='completed'? 'selected': ''} onClick={() => todoStore.filterTodo(\"completed\")}>\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <span\r\n          className=\"clear-completed\"\r\n          onClick={() => todoStore.clearCompleted()}\r\n        >\r\n          Clear completed\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport \"./App.css\";\nimport todoStore from \"./stores/TodoStore\";\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport Footer from './components/Footer';\n\n@observer\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n        <TodoItems />\n        {todoStore.todos.length ? <Footer/> : ''} \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}